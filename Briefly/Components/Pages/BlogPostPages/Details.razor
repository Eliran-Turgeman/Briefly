@page "/blogposts/details"
@using Microsoft.EntityFrameworkCore
@using Briefly
@using Briefly.Services.Summarization
@using Briefly.Services.Publishing
@inject IDbContextFactory<Briefly.Data.BrieflyContext> DbFactory
@inject NavigationManager NavigationManager
@inject ISummarizationService SummarizationService
@inject IPublishingService PublishingService

@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>BlogPost</h2>
    <hr />
    @if (blogpost is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Url</dt>
            <dd class="col-sm-10">@blogpost.Url</dd>
            <dt class="col-sm-2">Summary</dt>
            <dd class="col-sm-10">@blogpost.Summary</dd>
            <dt class="col-sm-2">IsApprovedSummary</dt>
            <dd class="col-sm-10">@blogpost.IsApprovedSummary</dd>
            <dt class="col-sm-2">IsPublished</dt>
            <dd class="col-sm-10">@blogpost.IsPublished</dd>
        </dl>
        <div>
            <a href="@($"/blogposts/edit?id={blogpost.Id}")">Edit</a> |
            <a href="@($"/blogposts")">Back to List</a> |
            <button @onclick="SummarizePost" disabled="@summarizingInProgress">
                @if (summarizingInProgress)
                {
                    <span>Summarizing...</span>
                }
                else
                {
                    <span>Summarize Post</span>
                }
            </button>
            <button @onclick="PublishPost" disabled="@publishingInProgress">
                @if (publishingInProgress)
                {
                    <span>Publishing...</span>
                }
                else
                {
                    <span>Publish Post</span>
                }
            </button>
        </div>
    }
</div>

@code {
    private BlogPost? blogpost;
    private bool summarizingInProgress = false;
    private bool publishingInProgress = false;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        blogpost = await context.BlogPost.FirstOrDefaultAsync(m => m.Id == Id);

        if (blogpost is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    protected async Task SummarizePost()
    {
        if (summarizingInProgress) return; // Prevent multiple clicks

        try
        {
            summarizingInProgress = true;
            StateHasChanged();

            await SummarizationService.SummarizeAsync(blogpost!, new CancellationTokenSource().Token);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred: {ex.Message}");
        }
        finally
        {
            summarizingInProgress = false;
            StateHasChanged();
        }
    }

    protected async Task PublishPost()
    {
        if (publishingInProgress) return; // Prevent multiple clicks

        try
        {
            publishingInProgress = true;
            StateHasChanged();

            await PublishingService.PublishAsync(blogpost!, new CancellationTokenSource().Token);

            blogpost!.IsPublished = true;

            using var context = DbFactory.CreateDbContext();
            context.BlogPost.Update(blogpost);
            await context.SaveChangesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred: {ex.Message}");
        }
        finally
        {
            publishingInProgress = false;
            StateHasChanged();
        }
    }
}
