@page "/blogposts/details"
@using Microsoft.EntityFrameworkCore
@using Briefly
@using Briefly.Services.Summarization
@inject IDbContextFactory<Briefly.Data.BrieflyContext> DbFactory
@inject NavigationManager NavigationManager
@inject ISummarizationService SummarizationService
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>BlogPost</h2>
    <hr />
    @if (blogpost is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Url</dt>
            <dd class="col-sm-10">@blogpost.Url</dd>
            <dt class="col-sm-2">Summary</dt>
            <dd class="col-sm-10">@blogpost.Summary</dd>
            <dt class="col-sm-2">IsApprovedSummary</dt>
            <dd class="col-sm-10">@blogpost.IsApprovedSummary</dd>
            <dt class="col-sm-2">IsPublished</dt>
            <dd class="col-sm-10">@blogpost.IsPublished</dd>
        </dl>
        <div>
            <a href="@($"/blogposts/edit?id={blogpost.Id}")">Edit</a> |
            <a href="@($"/blogposts")">Back to List</a> |
            <button @onclick="SummarizePost" disabled="@isSummarizing">
                @if (isSummarizing)
                {
                    <span>Summarizing...</span>
                }
                else
                {
                    <span>Summarize Post</span>
                }
            </button>
        </div>
    }
</div>

@code {
    private BlogPost? blogpost;
    private bool isSummarizing = false; // Track if summarization is in progress

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        blogpost = await context.BlogPost.FirstOrDefaultAsync(m => m.Id == Id);

        if (blogpost is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    protected async Task SummarizePost()
    {
        if (isSummarizing) return; // Prevent multiple clicks

        try
        {
            isSummarizing = true; // Set the loading state
            await SummarizationService.SummarizeAsync(blogpost, new CancellationTokenSource().Token);

            // Ensure the UI is updated after summarization
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., logging)
            Console.WriteLine($"Error occurred: {ex.Message}");
        }
        finally
        {
            isSummarizing = false; // Reset the loading state after completion
            StateHasChanged();
        }
    }
}
