@page "/blogposts/edit"
@using Microsoft.EntityFrameworkCore
@using Briefly
@inject IDbContextFactory<Briefly.Data.BrieflyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>BlogPost</h2>
<hr />
@if (BlogPost is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="BlogPost" OnValidSubmit="UpdateBlogPost" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="BlogPost.Id" value="@BlogPost.Id" />
                <div class="mb-3">
                    <label for="url" class="form-label">Url:</label>
                    <InputText id="url" @bind-Value="BlogPost.Url" class="form-control" />
                    <ValidationMessage For="() => BlogPost.Url" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="summary" class="form-label">Summary:</label>
                    <InputTextArea id="summary" @bind-Value="BlogPost.Summary" class="form-control" />
                    <ValidationMessage For="() => BlogPost.Summary" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isapprovedsummary" class="form-label">IsApprovedSummary:</label>
                    <InputCheckbox id="isapprovedsummary" @bind-Value="BlogPost.IsApprovedSummary" class="form-check-input" />
                    <ValidationMessage For="() => BlogPost.IsApprovedSummary" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="ispublished" class="form-label">IsPublished:</label>
                    <InputCheckbox id="ispublished" @bind-Value="BlogPost.IsPublished" class="form-check-input" />
                    <ValidationMessage For="() => BlogPost.IsPublished" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/blogposts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private BlogPost? BlogPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        BlogPost ??= await context.BlogPost.FirstOrDefaultAsync(m => m.Id == Id);

        if (BlogPost is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBlogPost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(BlogPost!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BlogPostExists(BlogPost!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/blogposts");
    }

    private bool BlogPostExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.BlogPost.Any(e => e.Id == id);
    }
}
