@page "/blogposts"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Briefly
@using Briefly.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Briefly.Data.BrieflyContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="blogposts/create">Create New</a><br />
    <a href="/blogposts/requiredAttention">Posts requiring attention</a>
</p>

<div>
    <label>Select View:</label>
    <select @bind="selectedView">
        <option value="All">All blog posts</option>
        <option value="RequireAttention">Posts requiring attention</option>
        <option value="WaitingForPublish">Posts waiting to be published</option>
        <!-- Add more options as needed -->
    </select>
</div>

<QuickGrid Class="table" Items="FilteredBlogPost" Pagination="paginationState">
    <PropertyColumn Property="blogpost => blogpost.Url" />
    <PropertyColumn Property="blogpost => TruncateSummary(blogpost.Summary!)" Title="Summary">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="summaryFilter" @bind:event="oninput" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="blogpost => blogpost.IsApprovedSummary" Sortable="true"  /> 
    <PropertyColumn Property="blogpost => blogpost.IsPublished" Sortable="true" />

    <TemplateColumn Context="blogpost">
        <a href="@($"blogposts/edit?id={blogpost.Id}")">Edit</a> |
        <a href="@($"blogposts/details?id={blogpost.Id}")">Details</a> |
        <a href="@($"blogposts/delete?id={blogpost.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="paginationState" />

@code {
    private BrieflyContext context = default!;
    PaginationState paginationState = new() { ItemsPerPage = 5 };
    string summaryFilter = string.Empty;
    string selectedView = "All";
    IQueryable<BlogPost> FilteredBlogPost => GetFilteredBlogPosts();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    private IQueryable<BlogPost> GetFilteredBlogPosts()
    {
        var query = context.BlogPost.AsQueryable();

        // Apply summary filter
        if (!string.IsNullOrEmpty(summaryFilter))
        {
            query = query.Where(blogpost => blogpost.Summary!.Contains(summaryFilter));
        }

        if (selectedView == "All")
        {
            // Show default view - all blog posts
        }
        else if (selectedView == "RequireAttention")
        {
            query = query.Where(blogpost => !blogpost.IsApprovedSummary && !blogpost.IsPublished);
        }
        else if (selectedView == "WaitingForPublish")
        {
            query = query.Where(blogpost => blogpost.IsApprovedSummary && !blogpost.IsPublished);
        }

        return query;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private void OnViewChanged(ChangeEventArgs e)
    {
        selectedView = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private string TruncateSummary(string summary)
    {
        if(string.IsNullOrEmpty(summary))
        {
            return string.Empty;
        }
        if (summary.Length > 100)
        {
            return summary.Substring(0, 100) + "...";
        }
        return summary;
    }
}
